clear variables

x_est = [0; 0]; % Initial estimation of the target's location
x_pred = [1; 1]; % Prediction of the target's location
plot(x_est(1,1), x_est(2,1), 'bx')
hold on
plot(x_pred(1), x_pred(2), 'ro')
theta = atan2(x_pred(2) - x_est(2), x_pred(1) - x_est(1)); % Computing the angle of movement
x_est = [x_est, x_pred + rand(2,1) * 1e-1]; % To be "close" to x_pred
plot(x_est(1,end), x_est(2,end), 'rx')

% Centro pode ser na estimativa
center = x_pred; % Center of the ellipse
r_max = norm(x_est(:,end) - x_pred); % Minor axis length
d = norm(x_est(:,1) - x_pred); % Major axis length
tt = 0 : pi/100 : 2*pi;
x_ellipse = center(1) + d/2*cos(tt)*cos(theta) - r_max/2*sin(tt)*sin(theta);
y_ellipse = center(2) + r_max/2*sin(tt)*cos(theta) + d/2*cos(tt)*sin(theta);
plot(x_ellipse, y_ellipse, 'b')

% Loop enquanto n√£o houver  
nPoints = 1e3;
points_tot = center + d * rand(2, nPoints) - d/2 * ones(2,nPoints); % Generating random points within a square region
plot(points_tot(1,:), points_tot(2,:),'ys')
inEllipse = ((points_tot(1,:)-center(1))*cos(theta) + (points_tot(2,:)-center(2))*sin(theta)).^2/(d/2)^2 + (-(points_tot(1,:)-center(1))*sin(theta) + (points_tot(2,:)-center(2))*cos(theta)).^2/(r_max/2)^2 <= 1; % Determining points inside the ellipse
plot(points_tot(1,inEllipse), points_tot(2,inEllipse),'g*')